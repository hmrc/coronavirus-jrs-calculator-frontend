#!/bin/bash

echo ""
echo "Applying migration PayQuestion"

echo "Adding routes to conf/app.routes"

echo "" >> ../conf/app.routes
echo "GET        /payQuestion                        controllers.PayQuestionController.onPageLoad(mode: Mode = NormalMode)" >> ../conf/app.routes
echo "POST       /payQuestion                        controllers.PayQuestionController.onSubmit(mode: Mode = NormalMode)" >> ../conf/app.routes

echo "GET        /changePayQuestion                  controllers.PayQuestionController.onPageLoad(mode: Mode = CheckMode)" >> ../conf/app.routes
echo "POST       /changePayQuestion                  controllers.PayQuestionController.onSubmit(mode: Mode = CheckMode)" >> ../conf/app.routes

echo "Adding messages to conf.messages"
echo "" >> ../conf/messages.en
echo "payQuestion.title = How is this employee paid?" >> ../conf/messages.en
echo "payQuestion.heading = How is this employee paid?" >> ../conf/messages.en
echo "payQuestion.a regular amount each time = a regular amount each time" >> ../conf/messages.en
echo "payQuestion.it varies each time = it varies each time" >> ../conf/messages.en
echo "payQuestion.checkYourAnswersLabel = How is this employee paid?" >> ../conf/messages.en
echo "payQuestion.error.required = Select payQuestion" >> ../conf/messages.en

echo "Adding to UserAnswersEntryGenerators"
awk '/trait UserAnswersEntryGenerators/ {\
    print;\
    print "";\
    print "  implicit lazy val arbitraryPayQuestionUserAnswersEntry: Arbitrary[(PayQuestionPage.type, JsValue)] =";\
    print "    Arbitrary {";\
    print "      for {";\
    print "        page  <- arbitrary[PayQuestionPage.type]";\
    print "        value <- arbitrary[PayQuestion].map(Json.toJson(_))";\
    print "      } yield (page, value)";\
    print "    }";\
    next }1' ../test/generators/UserAnswersEntryGenerators.scala > tmp && mv tmp ../test/generators/UserAnswersEntryGenerators.scala

echo "Adding to PageGenerators"
awk '/trait PageGenerators/ {\
    print;\
    print "";\
    print "  implicit lazy val arbitraryPayQuestionPage: Arbitrary[PayQuestionPage.type] =";\
    print "    Arbitrary(PayQuestionPage)";\
    next }1' ../test/generators/PageGenerators.scala > tmp && mv tmp ../test/generators/PageGenerators.scala

echo "Adding to ModelGenerators"
awk '/trait ModelGenerators/ {\
    print;\
    print "";\
    print "  implicit lazy val arbitraryPayQuestion: Arbitrary[PayQuestion] =";\
    print "    Arbitrary {";\
    print "      Gen.oneOf(PayQuestion.values.toSeq)";\
    print "    }";\
    next }1' ../test/generators/ModelGenerators.scala > tmp && mv tmp ../test/generators/ModelGenerators.scala

echo "Adding to UserAnswersGenerator"
awk '/val generators/ {\
    print;\
    print "    arbitrary[(PayQuestionPage.type, JsValue)] ::";\
    next }1' ../test/generators/UserAnswersGenerator.scala > tmp && mv tmp ../test/generators/UserAnswersGenerator.scala

echo "Migration PayQuestion completed"
